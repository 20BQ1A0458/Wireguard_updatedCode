apiVersion: v1
kind: Namespace
metadata:
  name: auth  # Create the 'auth' namespace if it doesn't already exist
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-wireguard
  namespace: auth
spec:
  replicas: 2
  selector:
    matchLabels:
      app: node-wireguard
  template:
    metadata:
      labels:
        app: node-wireguard
    spec:
      serviceAccountName: jenkins  # Ensure the pod uses the 'jenkins' service account
      hostNetwork: true  # Enable host network access for WireGuard
      initContainers:
        - name: wireguard-setup
          image: ubuntu:latest
          command:
            - /bin/bash
            - -c
            - |
              apt-get update && apt-get install -y \
                wireguard \
                wireguard-tools \
                iproute2 \
                iptables \
                iputils-ping \
                curl \
                && apt-get clean && rm -rf /var/lib/apt/lists/*

              # Generate WireGuard private and public keys
              PRIVATE_KEY=$(wg genkey)
              PUBLIC_KEY=$(echo $PRIVATE_KEY | wg pubkey)

              # Extract pod index from pod name (last part of the name)
              POD_INDEX=$(echo $POD_NAME | sed -E 's/.*-([a-z0-9]+)$/\1/')
              echo "Extracted POD_INDEX=$POD_INDEX"
              # Check if POD_INDEX extraction failed and set to default
              if [[ -z "$POD_INDEX" ]]; then
                POD_INDEX=1  # Fallback to default if extraction fails
              fi
              echo "Using POD_INDEX=$POD_INDEX"

              # Calculate ListenPort dynamically based on the pod index (start at 51820)
              LISTEN_PORT=$((51820 + ${POD_INDEX} - 1))  # Subtract 1 to start at 51820
              echo "Calculated LISTEN_PORT=$LISTEN_PORT"

              # Save keys and configuration to /etc/wireguard
              echo $PRIVATE_KEY > /etc/wireguard/privatekey
              echo $PUBLIC_KEY > /etc/wireguard/publickey
              echo "[Interface]" > /etc/wireguard/wg0.conf
              echo "PrivateKey=$(cat /etc/wireguard/privatekey)" >> /etc/wireguard/wg0.conf
              echo "Address=10.8.0.1/24" >> /etc/wireguard/wg0.conf
              echo "ListenPort=$LISTEN_PORT" >> /etc/wireguard/wg0.conf
              cat /etc/wireguard/wg0.conf

              # Bring up the WireGuard interface
              if ! wg show wg0 > /dev/null 2>&1; then
                wg-quick up wg0
              else
                echo "WireGuard interface wg0 is already up."
              fi
          securityContext:
            privileged: true
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: wireguard-config
              mountPath: /etc/wireguard

      containers:
        - name: node-wireguard
          image: bhargavram458/node-wireguard:latest
          ports:
            - containerPort: 4000   # Node.js app
              protocol: TCP
            - containerPort: 51820  # WireGuard UDP port
              protocol: UDP
            - containerPort: 51821  # WireGuard UDP port
              protocol: UDP
          env:
            - name: NODE_ENV
              value: production
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name  # Expose pod name to the container
          securityContext:
            capabilities:
              add:
                - NET_ADMIN  # Required for WireGuard operation
          volumeMounts:
            - name: wireguard-config
              mountPath: /etc/wireguard  # Mount WireGuard config into the container

      volumes:
        - name: wireguard-config
          emptyDir: {}  # Temporary volume for storing WireGuard config files

---
apiVersion: v1
kind: Service
metadata:
  name: node-wireguard-tcp
  namespace: auth
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # Ensure NLB is used
    service.beta.kubernetes.io/aws-load-balancer-internal: "false"  # Make it internet-facing
spec:
  type: LoadBalancer
  selector:
    app: node-wireguard
  ports:
    - name: tcp-traffic
      protocol: TCP
      port: 4000
      targetPort: 4000

---
apiVersion: v1
kind: Service
metadata:
  name: node-wireguard-udp
  namespace: auth
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-internal: "false"
spec:
  type: LoadBalancer
  selector:
    app: node-wireguard
  ports:
    - name: udp-traffic-51820
      protocol: UDP
      port: 51820
      targetPort: 51820
    - name: udp-traffic-51821
      protocol: UDP
      port: 51821
      targetPort: 51821
