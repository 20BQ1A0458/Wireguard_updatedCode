apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: node-wireguard
  namespace: auth
spec:
  serviceName: "node-wireguard"
  replicas: 2
  selector:
    matchLabels:
      app: node-wireguard
  template:
    metadata:
      labels:
        app: node-wireguard
    spec:
      serviceAccountName: jenkins
      hostNetwork: true
      initContainers:
        - name: wireguard-setup
          image: ubuntu:latest
          command:
            - /bin/bash
            - -c
            - |
              apt-get update && apt-get install -y \
                wireguard \
                wireguard-tools \
                iproute2 \
                iptables \
                iputils-ping \
                curl \
                ufw \
                && apt-get clean && rm -rf /var/lib/apt/lists/*
              # Generate WireGuard private and public keys
              PRIVATE_KEY=$(wg genkey)
              PUBLIC_KEY=$(echo "$PRIVATE_KEY" | wg pubkey)
              # Use the pod's hostname as POD_NAME
              POD_NAME=$(hostname)
              echo "POD_NAME=$POD_NAME"
              # Extract pod index directly from pod name (expecting 'node-wireguard-0' or 'node-wireguard-1')
              POD_INDEX=$(echo "$POD_NAME" | grep -oE '[0-9]+$')
              echo "Extracted POD_INDEX=$POD_INDEX"
              # Calculate ListenPort dynamically based on the pod index (51820 for pod 0, 51821 for pod 1)
              LISTEN_PORT=$((51820 + POD_INDEX))
              echo "Calculated LISTEN_PORT=$LISTEN_PORT"
              # Save keys and configuration to /etc/wireguard
              mkdir -p /etc/wireguard
              echo "$PRIVATE_KEY" > /etc/wireguard/privatekey
              echo "$PUBLIC_KEY" > /etc/wireguard/publickey
              # Write the WireGuard configuration file
              cat <<EOF > /etc/wireguard/wg0.conf
              [Interface]
              PrivateKey=$(cat /etc/wireguard/privatekey)
              Address=10.8.0.$((1 + POD_INDEX))/24
              ListenPort=$LISTEN_PORT
              EOF
              echo "Generated wg0.conf:"
              cat /etc/wireguard/wg0.conf
              # Apply firewall and NAT rules for internet access
              ufw route allow in on wg0 out on eth+  # Allow traffic from wg0 to eth+
              iptables -t nat -I POSTROUTING -o eth+ -j MASQUERADE  # NAT rule for internet access
              # Bring up the WireGuard interface
              wg-quick up wg0 || echo "WireGuard setup failed."
          securityContext:
            privileged: true
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: wireguard-config
              mountPath: /etc/wireguard
      containers:
        - name: node-wireguard
          image: bhargavram458/node-wireguard:latest
          ports:
            - containerPort: 4000   # Node.js app
              protocol: TCP
            - containerPort: 51820  # WireGuard UDP port
              protocol: UDP
            - containerPort: 51821  # WireGuard UDP port
              protocol: UDP
          env:
            - name: NODE_ENV
              value: production
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: wireguard-config
              mountPath: /etc/wireguard
      volumes:
        - name: wireguard-config
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: node-wireguard-tcp
  namespace: auth
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-internal: "false"
spec:
  type: LoadBalancer
  selector:
    app: node-wireguard
  ports:
    - name: tcp-traffic
      protocol: TCP
      port: 4000
      targetPort: 4000
---
apiVersion: v1
kind: Service
metadata:
  name: node-wireguard-udp
  namespace: auth
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-internal: "false"
spec:
  type: LoadBalancer
  selector:
    app: node-wireguard
  ports:
    - name: udp-traffic-51820
      protocol: UDP
      port: 51820
      targetPort: 51820
    - name: udp-traffic-51821
      protocol: UDP
      port: 51821
      targetPort: 51821















index.ts    







import express, { Request, Response } from "express";
import { exec } from "child_process";
import { promises as fs } from "fs";
import { IPPoolManager, createIPPoolManager } from "./ipPoolManager";

const app = express();
app.use(express.json());

// WireGuard Configuration Paths
const PRIVATE_KEY_PATH = "/etc/wireguard/privatekey";
const PUBLIC_KEY_PATH = "/etc/wireguard/publickey";
const CONFIG_PATH = "/etc/wireguard/wg0.conf";

// IP Pool Manager Instance
const poolManager = createIPPoolManager("10.8.0.0/24");

// Utility to execute shell commands
const executeCommand = (command: string): Promise<string> =>
  new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        return reject(stderr || error.message);
      }
      resolve(stdout.trim());
    });
  });

// Get Pod Name by Index
const getPodNameByIndex = async (index: number): Promise<string> => {
  const output = await executeCommand(
    "kubectl get pods -n auth -o jsonpath='{.items[*].metadata.name}'"
  );

  const podNames = output.split(" ").filter((name) => name.startsWith("node-wireguard"));

  if (index < 0 || index >= podNames.length) {
    throw new Error("Index out of range for WireGuard pods");
  }

  return podNames[index];
};

// Add Peer to Kubernetes Pod
const addPeerWithKubernetes = async (
  clientPublicKey: string,
  assignedIP: string,
  podName: string
): Promise<void> => {
  try {
    const command = `kubectl exec -n auth ${podName} -- wg set wg0 peer ${clientPublicKey} allowed-ips ${assignedIP}/32`;
    await executeCommand(command);
  } catch (error) {
    console.error("Error in addPeerWithKubernetes:", error instanceof Error ? error.message : error);
    throw error;
  }
};

// Add Peer to Local WireGuard Instance
const addPeer = async (clientPublicKey: string, assignedIP: string): Promise<void> => {
  try {
    const command = `wg set wg0 peer ${clientPublicKey} allowed-ips ${assignedIP}/32`;
    await executeCommand(command);
  } catch (error) {
    console.error("Error in addPeer:", error instanceof Error ? error.message : error);
    throw error;
  }
};

// Endpoint for adding a new peer
app.post("/add-peer", async (req: Request, res: Response): Promise<any> => {
  const { clientPublicKey } = req.body;

  if (!clientPublicKey) {
    return res.status(400).json({ error: "clientPublicKey is required" });
  }

  try {
    const assignedIP = poolManager.assignIP(clientPublicKey);

    if (assignedIP === null) {
      return res.status(500).json({ error: "No available IPs" });
    }

    const randomIndex = Math.floor(Math.random() * 2); // Get a random pod index (assuming 2 pods)
    const podName = await getPodNameByIndex(randomIndex);

    // Add peer to the Kubernetes pod
    await addPeerWithKubernetes(clientPublicKey, assignedIP, podName);

    const serverPublicKey = await executeCommand( `kubectl exec -n auth ${podName} -- cat /etc/wireguard/publickey`);
    res.status(200).json({
      message: "Peer added successfully",
      assignedIP,
      podName,
      randomIndex,
      serverPublicKey: serverPublicKey.trim(),
    });
  } catch (error) {
    res.status(500).json({ error: error instanceof Error ? error.message : "An error occurred" });
    console.error("Add Peer Error:", error);
  }
});

// Start the Express server
app.listen(4000, () => {
  console.log("Server is running on http://0.0.0.0:4000");
});

