
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: node-wireguard
  namespace: wireguard
spec:
  serviceName: "node-wireguard"
  replicas: 5
  selector:
    matchLabels:
      app: node-wireguard
  template:
    metadata:
      labels:
        app: node-wireguard
    spec:
      #hostNetwork: true
      #dnsPolicy: None
      #dnsConfig:
        #nameservers:
          #- 8.8.8.8
          #- 1.1.1.1
        #searches:
          #- wireguard.svc.cluster.local
          #- svc.cluster.local
          #- cluster.local
      serviceAccountName: jenkins
      initContainers:
        - name: wireguard-setup
          image: ubuntu:latest
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          command:
            - /bin/bash
            - -c
            - |
              # Install necessary packages
              apt-get update && apt-get install -y \
                wireguard \
                wireguard-tools \
                iproute2 \
                iptables \
                iputils-ping \
                curl \
                && apt-get clean && rm -rf /var/lib/apt/lists/*

              # Generate WireGuard private and public keys
              ip link delete wg0 || true
              PRIVATE_KEY=$(wg genkey)
              PUBLIC_KEY=$(echo "$PRIVATE_KEY" | wg pubkey)

              # Extract pod index from pod name (e.g., node-wireguard-0, node-wireguard-1)
              if [[ -z "$POD_NAME" ]]; then
                echo "Error: POD_NAME is not set"
                exit 1
              fi

              POD_INDEX=$(echo "$POD_NAME" | grep -oE '[0-9]+$')
              if [[ -z "$POD_INDEX" ]]; then
                echo "Error: Failed to extract POD_INDEX from POD_NAME"
                exit 1
              fi

              LISTEN_PORT=$((51820 + POD_INDEX))
              PEER_IP="10.8.0.$((1 + POD_INDEX))"

              # Save the private and public keys to the container
              mkdir -p /etc/wireguard
              echo "$PRIVATE_KEY" > /etc/wireguard/privatekey
              echo "$PUBLIC_KEY" > /etc/wireguard/publickey

              # Write the WireGuard configuration
              cat <<EOF > /etc/wireguard/wg0.conf
              [Interface]
              PrivateKey=$PRIVATE_KEY
              Address=$PEER_IP/24
              ListenPort=$LISTEN_PORT
              SaveConfig=true
              EOF

              # Enable IP forwarding inside the container
              echo "1" > /proc/sys/net/ipv4/ip_forward

              # Set up iptables for NAT and forwarding
              iptables -A FORWARD -i wg0 -j ACCEPT
              iptables -A FORWARD -o wg0 -j ACCEPT
              iptables -t nat -A POSTROUTING -o ens+ -j MASQUERADE
              iptables -t nat -A POSTROUTING -o wg0 -j MASQUERADE

              # Bring up the WireGuard interface
              wg-quick up wg0 || echo "WireGuard setup failed."
          securityContext:
            privileged: true
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: wireguard-config
              mountPath: /etc/wireguard
      containers:
        - name: node-wireguard
          image: bhargavram458/node-wireguard:latest
          ports:
            - containerPort: 4000
              protocol: TCP
            - containerPort: 51820
              protocol: UDP
            - containerPort: 51821
              protocol: UDP
            - containerPort: 51822
              protocol: UDP
            - containerPort: 51823
              protocol: UDP
            - containerPort: 51824
              protocol: UDP
          env:
            - name: NODE_ENV
              value: production
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: wireguard-config
              mountPath: /etc/wireguard
      volumes:
        - name: wireguard-config
          emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  name: node-wireguard-tcp
  namespace: wireguard
  # annotations:
  #   service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
  #   service.beta.kubernetes.io/aws-load-balancer-internal: "false"
spec:
  type: LoadBalancer
  selector:
    app: node-wireguard
  ports:
    - name: tcp-traffic
      protocol: TCP
      port: 4000
      targetPort: 4000

---
apiVersion: v1
kind: Service
metadata:
  name: node-wireguard-udp
  namespace: wireguard
spec:
  type: NodePort  # Changed to NodePort for exposing WireGuard ports
  selector:
    app: node-wireguard
  ports:
    - name: udp-traffic-51820
      protocol: UDP
      port: 51820
      targetPort: 51820
      nodePort: 30002  # NodePort for pod 0
    - name: udp-traffic-51821
      protocol: UDP
      port: 51821
      targetPort: 51821
      nodePort: 30003  # NodePort for pod 1
    - name: udp-traffic-51822
      protocol: UDP
      port: 51822
      targetPort: 51822
      nodePort: 30004  # NodePort for pod 2
    - name: udp-traffic-51823
      protocol: UDP
      port: 51823
      targetPort: 51823
      nodePort: 30005  # NodePort for pod 3
    - name: udp-traffic-51824
      protocol: UDP
      port: 51824
      targetPort: 51824
      nodePort: 30006  # NodePort for pod 4



# ----------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------SOCKET CODE-------------------------------Working Fine-------------------------------------------------



# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: node-udp-server
# spec:
#   replicas: 1  # Adjust the number of replicas as needed
#   selector:
#     matchLabels:
#       app: node-udp-server
#   template:
#     metadata:
#       labels:
#         app: node-udp-server
#     spec:
#       containers:
#       - name: node-udp-server 
#         image: bhargavram458/node-wireguard:latest  # Replace with your Docker image name
#         ports:
#         - containerPort: 51820
#           protocol: UDP
#         env:
#         - name: NODE_ENV
#           value: "production"

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: node-udp-server-service
#   namespace: auth
# spec:
#   selector:
#     app: node-udp-server
#   ports:
#     - protocol: UDP
#       port: 51820    # Port inside the cluster
#       targetPort: 51820  # Port exposed by the container
#       nodePort: 30001   # NodePort to expose the service externally
#   type: NodePort
#   externalTrafficPolicy: Local
